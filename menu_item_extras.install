<?php

/**
 * @file
 * Contains install/uninstall functionality of module.
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function menu_item_extras_install() {
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  $menus = \Drupal::entityTypeManager()
    ->getStorage('menu')
    ->loadMultiple();
  /** @var \Drupal\menu_item_extras\Service\MenuLinkContentService $mlc_helper */
  $mlc_helper = \Drupal::service('menu_item_extras.menu_link_content_helper');
  $mlc_helper->installViewModeField();
  if (!empty($menus)) {
    foreach ($menus as $menu_id => $menu) {
      $mlc_helper->updateMenuItemsBundle($menu_id);
    }
  }
  $mlc_helper->doEntityUpdate();
  $mlc_helper->updateMenuLinkContentBundle();
}

/**
 * Implements hook_uninstall().
 */
function menu_item_extras_uninstall() {
  $menus = \Drupal::entityTypeManager()
    ->getStorage('menu')
    ->loadMultiple();
  /** @var \Drupal\menu_item_extras\Service\MenuLinkContentService $mlc_helper */
  $mlc_helper = \Drupal::service('menu_item_extras.menu_link_content_helper');
  if (!empty($menus)) {
    foreach ($menus as $menu_id => $menu) {
      $mlc_helper->updateMenuItemsBundle($menu_id, FALSE);
    }
  }
  $mlc_helper->doEntityUpdate();
  // Clear cache plugins for invoking hook_entity_type_build and rebuid entity.
  // @see menu_item_extras_entity_type_build().
  \Drupal::configFactory()->getEditable('menu_item_extras.utility')->delete();
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();
  $mlc_helper->updateMenuLinkContentBundle();
}

/**
 * Implements hook_update_N().
 *
 * Collect data to update.
 */
function menu_item_extras_update_8021(&$sandbox) {
  /** @var \Drupal\Core\Database\Query\SelectInterface $query */
  $query = \Drupal::database()
    ->select('menu_link_content_data', 'md')
    ->fields('md', [
      'id',
      'menu_name',
      'body__value',
      'body__format',
    ])
    ->condition('body__value', NULL, 'IS NOT NULL');
  $result = $query
    ->execute()
    ->fetchAllAssoc('id');
  \Drupal::state()->set('menu_item_extras_1_to_2', $result);
}

/**
 * Implements hook_update_N().
 *
 * Make 1.x body fields empty.
 */
function menu_item_extras_update_8022(&$sandbox) {
  \Drupal::database()
    ->update('menu_link_content_data')
    ->fields([
      'body__value' => NULL,
      'body__format' => NULL,
    ])
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Apply entity changes.
 */
function menu_item_extras_update_8023(&$sandbox) {
  \Drupal::service('config.factory')
    ->getEditable('menu_item_extras.utility')
    ->set('entity_type_build_status', TRUE)
    ->save();
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();
  /** @var \Drupal\menu_item_extras\Service\MenuLinkContentService $mlc_helper */
  $mlc_helper = \Drupal::service('menu_item_extras.menu_link_content_helper');
  $mlc_helper->doEntityUpdate();
}

/**
 * Implements hook_update_N().
 *
 * Update existing menu items.
 */
function menu_item_extras_update_8024() {
  /** @var \Drupal\menu_item_extras\Service\MenuLinkContentService $mlc_helper */
  $mlc_helper = \Drupal::service('menu_item_extras.menu_link_content_helper');
  $mlc_helper->updateMenuLinkContentBundle();
}

/**
 * Implements hook_update_N().
 *
 * Update existing menu items.
 */
function menu_item_extras_update_8025() {
  $menus = \Drupal::entityTypeManager()->getStorage('menu')->loadMultiple();
  $linkStorage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  foreach ($menus as $menu) {
    $links = $linkStorage->loadByProperties(['menu_name' => $menu->id()]);
    if (!empty($links)) {
      \Drupal::database()
        ->update('menu_link_content_data')
        ->fields([
          'bundle' => $menu->id(),
        ])
        ->condition('id', array_keys($links), 'IN')
        ->condition('bundle', 'menu_link_content')
        ->execute();
      \Drupal::database()
        ->update('menu_link_content')
        ->fields([
          'bundle' => $menu->id(),
        ])
        ->condition('id', array_keys($links), 'IN')
        ->condition('bundle', 'menu_link_content')
        ->execute();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Finalize 1.x to 2.x update path.
 */
function menu_item_extras_update_8026() {
  \Drupal::service('menu_item_extras.menu_link_content_helper')
    ->updateMenuLinkContentBundle();

  $result = \Drupal::state()->get('menu_item_extras_1_to_2');
  if (!empty($result)) {

    $field_name = 'field_body';
    $display_mode = 'default';

    $link_storage = \Drupal::entityTypeManager()
      ->getStorage('menu_link_content');

    /** @var \Drupal\menu_item_extras\Service\UpdateHelper $updater */
    $updater = \Drupal::service('menu_item_extras.update');

    $field_storage = $updater->checkBodyFieldStorage(
      $field_name, 'menu_link_content', 'text_with_summary'
    );

    foreach ($result as $id => $item) {
      /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
      $entity = $link_storage->load($id);

      $updater->checkBodyField(
        $field_storage,
        $entity,
        $field_name,
        t('Body'),
        ['display_summary' => TRUE]
      );

      $entity->get($field_name)->setValue([
        'value' => $item->body__value,
        'format' => $item->body__format,
      ]);

      $entity->save();

      $updater->checkViewDisplay($display_mode, $entity, $field_name, [
        'label' => 'hidden',
        'type' => 'text_default',
      ]);
      $updater->checkFormDisplay($display_mode, $entity, $field_name, [
        'type' => 'text_textarea_with_summary',
      ]);

    }
    \Drupal::state()->delete('menu_item_extras_1_to_2');
  }
}
