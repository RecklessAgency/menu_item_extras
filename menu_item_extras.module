<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;


/**
 * Implements hook_help().
 */
function menu_item_extras_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the menu_item_extras module.
    case 'help.page.menu_item_extras':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide an additional custom fields which can be used on Menu link') . '</p>';
      return $output;
  }
}


/**
 * Implements hook_theme().
 */
function menu_item_extras_theme() {
  $theme = [];
  $theme['menu__extras'] = [
    'render element' => 'content',
    'base hook' => 'menu',
  ];
  return $theme;
}


/**
 * Implements hook_preprocess_HOOK().
 */
function menu_item_extras_preprocess_block(&$variables) {
  // Menus are built with #theme 'menu__MENU_NAME' form the the MenuLinkTree
  // class. We need to build menus supported by simple mega menu with the
  // default #theme menu, to be able to add suggestions in the good order.
  if (isset($variables['content']['#menu_name'])) {
    $menu_name = $variables['content']['#menu_name'];
    $allowed_menus = \Drupal::configFactory()
      ->get('menu_item_extras.settings')
      ->get('allowed_menus');

    if (in_array($menu_name, $allowed_menus)) {
      $variables['content']['#theme'] = 'menu';
    }
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function menu_item_extras_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $suggestion_prefix = 'menu__extras';
  $allowed_menus = \Drupal::configFactory()
    ->get('menu_item_extras.settings')
    ->get('allowed_menus');

  $menu_name = $variables['menu_name'];
  $menu_name_sanitized = strtr($menu_name, '-', '_');

  if (in_array($menu_name, $allowed_menus)) {
    $suggestions = [];

    // Default suggestion
    $suggestions[] = 'menu__' . $menu_name_sanitized;
    // Custom suggestions.
    $suggestions[] = $suggestion_prefix;
    $suggestions[] = $suggestion_prefix . '__' . $menu_name_sanitized;
  }

  return $suggestions;
}


/**
 * Implements hook_entity_base_field_info().
 */
function menu_item_extras_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() == 'menu_link_content') {

    $fields['copy'] = BaseFieldDefinition::create('text_long')
      ->setLabel(t('Body'))
      ->setDescription(t('Add description block to menu item.'))
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', array(
        'type' => 'text_textfield',
        'weight' => 0,
      ))
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}


function menu_item_extras_preprocess_menu(&$variables) {
  _menu_item_extras_process_items($variables['items']);
}

function _menu_item_extras_process_items(&$items) {
  foreach ($items as &$item) {
    if (isset($item['original_link']) && $item['original_link'] instanceof MenuLinkContent) {
      $entity_id = $item['original_link']->getMetaData()['entity_id'];
      $field_copy = \Drupal::entityTypeManager()
        ->getStorage('menu_link_content')
        ->load($entity_id)
        ->get('copy');

      $item['copy'] = ['#markup' => $field_copy->value];
      if ($item['below']) {
        _menu_item_extras_process_items($item['below']);
      }
    }
  }
}

