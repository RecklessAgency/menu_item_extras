<?php

/**
 * @file
 * Manage field for the menu items.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function menu_item_extras_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the menu_item_extras module.
    case 'help.page.menu_item_extras':
      $output = [
        '#type' => 'container',
        'title' => [
          '#type' => 'html_tag',
          '#tag' => 'h3',
          '#value' => t('About'),
        ],
        'description' => [
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => t('Provide an additional custom fields which can be used on Menu link'),
        ],
      ];
      return render($output);
  }
}

/**
 * Implements hook_entity_type_build().
 */
function menu_item_extras_entity_type_build(array &$entity_types) {
  $content_entity = 'menu_link_content';
  // Set entity type to be bundled.
  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $mlc */
  $mlc = $entity_types[$content_entity];
  $mlc->set('bundle_entity_type', 'menu');
  $mlc->set('field_ui_base_route', 'entity.menu.edit_form');
  // Set entity to be a bundle entity type for previous entity.
  /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $menu */
  $menu = $entity_types['menu'];
  $menu->set('bundle_of', $content_entity);
}

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * As mentioned in the description of this hook
 * the functionality can be changed.
 *
 * @TODO: We should follow possible changes.
 *
 * @see hook_entity_base_field_info_alter()
 * @see https://www.drupal.org/node/2346329
 */
function menu_item_extras_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
  if ($entity_type->id() === 'menu_link_content' && isset($fields['weight'])) {
    $options = $fields["weight"]->getDisplayOptions('view');
    // Lets check if field definition is buggy.
    if ($options['type'] === 'integer') {
      // Yep, this is single reason why view display can't be set. Let's fix it.
      $options['type'] = 'number_integer';
      // @TODO: This should be fixed in the menu_link_content core module.
      $fields['weight']->setDisplayOptions('view', $options);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function menu_item_extras_menu_link_content_presave(EntityInterface $entity) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  if (!empty($entity->original) && ($entity->original->getMenuName() !== $entity->getMenuName())) {
    /** @var \Drupal\menu_item_extras\Service\MenuLinkContentServiceInterface $menu_links_helper */
    $menu_links_helper = \Drupal::service('menu_item_extras.menu_link_content_helper');
    $menu_links_helper->cleanupFields($entity);
    $entity->set('bundle', $entity->getMenuName());
  }
}

/**
 * Implements hook_theme().
 */
function menu_item_extras_theme() {
  $theme = [];
  $theme['menu__extras'] = [
    'render element' => 'content',
    'base hook' => 'menu',
  ];
  return $theme;
}

/**
 * Implements hook_preprocess_block().
 */
function menu_item_extras_preprocess_block(&$variables) {
  // Menus are built with #theme 'menu__MENU_NAME' form the the MenuLinkTree
  // class. We need to build menus supported by menu_item_extras with the
  // default #theme menu, to be able to add suggestions in the good order.
  if (isset($variables['content']['#menu_name'])) {
    $variables['content']['#theme'] = 'menu';
    // Pass region name to the suggestions_menu_alter for
    // the region suggestion.
    $block_id = $variables['elements']['#id'];
    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $block_storage */
    $block_storage = \Drupal::entityTypeManager()
      ->getStorage('block');
    /** @var \Drupal\block\BlockInterface $block */
    $block = $block_storage->load($block_id);
    $variables['content']['#attributes']['data-region'] = $block->getRegion();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function menu_item_extras_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $suggestion_prefix = 'menu__extras';

  $menu_name = $variables['menu_name'];
  $menu_name_sanitized = strtr($menu_name, '-', '_');

  $suggestions = [];

  // Custom suggestions.
  $suggestions[] = $suggestion_prefix;
  $suggestions[] = $suggestion_prefix . '__' . $menu_name_sanitized;
  // Custom suggestions for the parent region.
  if (isset($variables['attributes']['data-region'])) {
    $suggestions[] = $suggestion_prefix . '__' . $menu_name_sanitized . '__' . $variables['attributes']['data-region'];
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_menu().
 */
function menu_item_extras_preprocess_menu(&$variables) {
  \Drupal::service('menu_item_extras.menu_link_tree_handler')
    ->processMenuLinkTree($variables['items']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function menu_item_extras_form_menu_link_content_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\menu_link_content\Form\MenuLinkContentForm $form_object */
  $form_object = $form_state->getBuildInfo()['callback_object'];
  /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $entity */
  $entity = $form_object->getEntity();
  $bundle = $entity->get('menu_name')->getString();
  foreach ($form['menu_parent']['#options'] as $option_id => $option) {
    if (strpos($option_id, $bundle) !== 0) {
      unset($form['menu_parent']['#options'][$option_id]);
    }
  }
}
